# docker-compose.yml
version: '3.8'

services:
  # PostgreSQL Database Service
  db:
    image: postgres:13-alpine # Using a lightweight PostgreSQL image
    volumes:
      - pgdata:/var/lib/postgresql/data # Persistent data volume
    environment:
      POSTGRES_DB: django_db # Database name
      POSTGRES_USER: user # Database user
      POSTGRES_PASSWORD: password # Database password
    networks:
      - app_network # Connect to the internal network

  # Django Backend Service
  backend:
    build:
      context: ./backend # Path to your Django project directory
      dockerfile: Dockerfile.backend # Specify Django's Dockerfile
    command: gunicorn your_project_name.wsgi:application --bind 0.0.0.0:8000 # Gunicorn command to run Django
    volumes:
      - ./backend:/app # Mount your Django project into the container
    expose:
      - "8000" # Expose port 8000 for internal network communication
    environment:
      DATABASE_URL: postgres://user:password@db:5432/django_db # Database connection string
      DJANGO_SETTINGS_MODULE: your_project_name.settings # Your Django settings file
    depends_on:
      - db # Ensure the database is up before starting Django
    networks:
      - app_network # Connect to the internal network

  # React Frontend Service (served by Nginx)
  frontend:
    build:
      context: ./frontend # Path to your React project directory
      dockerfile: Dockerfile.frontend # Specify React/Nginx's Dockerfile
    ports:
      - "80:80" # Map host port 80 to container port 80 for web access
    depends_on:
      - backend # Ensure backend is up for Nginx proxying
    networks:
      - app_network # Connect to the internal network

volumes:
  pgdata: # Define the persistent volume for PostgreSQL

networks:
  app_network: # Define a custom bridge network
    driver: bridge # Use the default bridge driver